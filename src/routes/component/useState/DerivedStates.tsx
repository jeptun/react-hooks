import React, { useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from "@/components/ui/card";

type TProduct = {
  id: number;
  name: string;
  price: number;
  emoji: string;
  quantity: number;
  numberInStock: number;
};

interface IProducts {
  products: TProduct[];
}

export default function DerivedStates() {
  const [productsData, setProductsData] = useState<IProducts>({
    products: [
      {
        id: 1,
        name: "apple",
        price: 10,
        emoji: "üçè",
        quantity: 0,
        numberInStock: 10
      },
      {
        id: 2,
        name: "grapes",
        price: 20,
        emoji: "üçá",
        quantity: 0,
        numberInStock: 10
      },
      {
        id: 3,
        name: "banana",
        price: 30,
        emoji: "üçå",
        quantity: 0,
        numberInStock: 10
      },
      {
        id: 4,
        name: "watermelon",
        price: 40,
        emoji: "üçâ",
        quantity: 0,
        numberInStock: 1
      }
    ]
  });
  const [selectedId, setSelectedId] = useState<number | null>(null);

  const selectedProduct = productsData.products.find(
    (p) => p.id === selectedId
  );

  // Increase the quantity of a product by 1
  const handleIncreaseProduct = (name: string) => {
    setProductsData((prev) => ({
      products: prev.products.map((product) => {
        if (product.name === name && product.numberInStock > product.quantity) {
          return { ...product, quantity: product.quantity + 1 };
        } else return product;
      })
    }));
  };
  // Decrease the quantity of a product by 1
  const handleDecreaseProduct = (name: string) => {
    setProductsData((prev) => ({
      products: prev.products.map((product) => {
        if (
          product.name === name &&
          product.quantity > 0 &&
          product.numberInStock >= product.quantity
        ) {
          return { ...product, quantity: product.quantity - 1 };
        } else {
          return product;
        }
      })
    }));
  };

  const handleChoose = (id: number) => {
    setSelectedId(id);
  };
  console.table(productsData);

  return (
    <Card className="bg-muted">
      <CardHeader>
        <CardTitle>Derived States</CardTitle>
        <CardDescription>
          V React, "derived states" jsou stavy, kter√© jsou odvozeny (vypoƒç√≠t√°ny)
          z jin√Ωch stav≈Ø nebo propojen√≠ komponent. Toto jsou obvykle vnit≈ôn√≠
          stavy komponenty, kter√© nejsou p≈ô√≠mo nastaveny pomoc√≠ setState(), ale
          jsou vypoƒç√≠t√°ny na z√°kladƒõ jin√Ωch stav≈Ø nebo vstup≈Ø. Pou≈æ√≠vaj√≠ se,
          kdy≈æ pot≈ôebujete prov√°dƒõt v√Ωpoƒçty nebo transformace na z√°kladƒõ
          aktu√°ln√≠ho stavu a pou≈æ√≠t je k renderov√°n√≠ komponenty. T√≠m se
          zaji≈°≈•uje, ≈æe komponenta z≈Øst√°v√° v synchronizaci s daty a zmƒõnami v
          aplikaci.üï≥Ô∏è V ≈°ir≈°√≠m kontextu programov√°n√≠ mohou "derived states"
          znamenat jak√©koli stavy nebo hodnoty, kter√© jsou vypoƒç√≠t√°ny nebo
          odvozeny z jin√Ωch dat nebo promƒõnn√Ωch. Toto se pou≈æ√≠v√° k tomu, aby se
          programov√Ω k√≥d zjednodu≈°il a aby bylo mo≈æn√© efektivnƒõji pracovat s
          daty. Nap≈ô√≠klad m≈Ø≈æete vytvo≈ôit promƒõnnou celkem na z√°kladƒõ dvou
          jin√Ωch promƒõnn√Ωch a a b pomoc√≠ v√Ωrazu celkem = a + b. celkem je
          odvozen√Ω stav.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="md:grid md:grid-cols-2 gap-4 flex flex-col ">
          {productsData.products.map((product) => (
            <div className="my-4" key={product.id}>
              <Card className="max-w-xs m-auto" key={product.id}>
                <h3 className="text-3xl  my-2 text-center uppercase">
                  {product.name}
                </h3>
                <p className="text-md text-center  my-2  text-muted-foreground">
                  Number in The Stock {product.numberInStock}
                </p>
                <div className="flex justify-center items-center ">
                  <div className="flex gap-12">
                    <Button
                      onClick={() => handleDecreaseProduct(product.name)}
                      className="text-2xl"
                    >
                      -
                    </Button>
                    <span className="text-4xl">{product.quantity}</span>
                    <Button
                      onClick={() => handleIncreaseProduct(product.name)}
                      className="text-2xl"
                    >
                      +
                    </Button>
                  </div>
                </div>
                <div className=" my-6 flex justify-center items-center ">
                  <Button onClick={() => handleChoose(product.id)}>
                    {product.emoji} Choose
                  </Button>
                </div>
              </Card>
            </div>
          ))}
        </div>
      </CardContent>
      <CardFooter>
        <h2 className="text-3xl font-bold uppercase text-center">
          Selected Product
        </h2>
        <div className="flex flex-col gap-3 justify-between m-auto">
          <p className="text-xl font-bold uppercase">{selectedProduct?.name}</p>
          <p className="text-xl font-bold uppercase">
            {selectedProduct?.quantity}
          </p>
        </div>
      </CardFooter>
    </Card>
  );
}
